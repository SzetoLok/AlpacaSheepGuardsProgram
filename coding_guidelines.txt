Coding Guidelines
FIT9131 Coding Guidelines

1. Naming

    1.1  Use descriptive names for all identifiers (names of variables, methods, and classes).  

    1.2  Avoid abbreviations and ambiguity. For example, use number instead of num or no. 

    1.3  Use camel case for names with multiple words to increase readability. With camel case the second and subsequent words begin with a capital letter. For example, numberOfItems.

See below further guidelines for specific naming of variables, methods, and classes.

2. Operators:

    2.1  When defining expressions using operators, there should be a single space before and after the  operator for the following types of operators:  arithmetic (+, -, *, /, %), relational (>, >=, <, <=, ==, !=), logical (&&, ||, !), conditional ( ? :), assignment (=), and compound assignment (= += -= *= /= %=).

3. Variables:

    3.1  Fields must only be initialised in the constructor, unless they are static or final.

    3.2  Local variables must be initialised when they are declared.

    3.3  The use of public fields must be justified.

    3.4  Variable names must use camel casing with the first character always in lowercase.

    3.5  Variable names must not contain an underscore ( _ )  (except final variables).

    3.6 Final variables must be in all capital letters and must use an underscore to split up multiple words in the name.

4. Methods:

    4.1  Methods must have exactly one blank line between each method, and between the start and end of the class's delimiter ({ })'s.

    4.2  Method names must be or contain action verbs. Names should be descriptive and convey a high level idea of the purpose of the method.

    4.3  Method names must use camel casing with the first character always lowercase.

    4.4  Methods must be sorted alphabetically (except constructors, which always appear first).

    4.5  Simple mutator methods should be named setSomething and accessor methods should be named getSomething. Accessor methods with boolean return values are often called isSomething.

5. Classes:

    5.1  Class names must be nouns and must be singular.

    5.2  Class names must follow camel casing with the first character always uppercase.

    5.3  Each file must only contain one class definition.

    5.4  A complete class template must include:

one default constructor

at least one non-default constructor (if the class has fields)

accessors for each field

mutators for each field

a display/toString method.

    5.5  The components of a class must be defined in the following order: fields, constructors, methods

6. Brackets and indentation:

    6.1  All code within a specific block must have exactly one indent. One indent is equal to one tab or four spaces.

    6.2  The placement of { }'s to start and end a block must appear on their own line. Opening braces ({) especially should not be placed on the same line as the header.

7. Code:

    7.1  Access modifiers are not optional and must be explicitly defined for methods and fields.

    7.2  The maximum code line length should be 80 characters. To prevent code going off the screen, consider breaking the code across multiple lines. 

    7.3  Any code that has been copied from another source must be otherwise appropriately credited. 


8. Documentation:

    8.1  Every class should have a comment at the top, which should include a general description of the class, the author's name and version number.

    8.2  Every person who has contributed to a class must be named as an author or must be otherwise appropriately credited. 

    8.3  Every method should have a comment at the top with a general description of the method.

    8.4  Inline comments should only be included where they are necessary to explain a key concept. Excessive inline comments must be avoided as they affect code readability.

The above is a finite list of conventions that must be followed when programming in this unit. Failing to adhere to these standards will generally cost marks on all assessed submissions after this module.

